{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchField.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","key","SearchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","borderBottom","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onInputChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0RAceA,EAZF,SAACC,GACZ,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,iBAAmDC,IAAKJ,EAAMK,OACtE,6BACE,4BAAKL,EAAMK,MACX,2BAAIL,EAAMM,UCOHC,EAZE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OAAO,kBAAC,EAAD,CAAMC,IAAKF,EAAKP,GAAIE,KAAMK,EAAKL,KAAMC,MAAOI,EAAKJ,MAAOH,GAAIO,EAAKP,UCMnEU,G,MAXK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACpB,OACE,2BACEb,UAAU,SACVc,KAAK,OACLC,YAAY,iBACZC,SAAUH,MCODI,EAdA,SAAClB,GACd,OACE,yBAAKmB,MACH,CACEC,UAAW,SACXC,OAAQ,QACRC,aAAc,mBAGftB,EAAMuB,WCYEC,E,kDApBb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACL,+DAEAG,KAAK7B,MAAMuB,a,GAhBIQ,aC2CbC,G,wDArCb,aAAe,IAAD,8BACZ,gBAaFC,cAAgB,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAc,IAJJ,E,gEAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAOjC,IAAD,EACuBb,KAAKJ,MAA5BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YACTQ,EAAiBnC,EAAOoC,QAAO,SAAAlC,GACnC,OAAOA,EAAKL,KAAKwC,cAAcC,SAASX,EAAYU,kBAEtD,OAAQrC,EAAOuC,OAEf,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,WAAd,eACA,kBAAC,EAAD,CAAaa,aAAce,KAAKI,gBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQmC,OANxB,wBAAI1C,UAAU,cAAd,kB,GAzBc8B,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.2b7ee789.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${props.id}?size=200x200`} alt={props.name} />\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p>{props.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return <Card key={user.id} name={user.name} email={user.email} id={user.id} />\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './SearchField.css'\r\n\r\nconst SearchField = ({searchChange}) => {\r\n  return(\r\n    <input\r\n      className=\"search\"  \r\n      type=\"text\" \r\n      placeholder=\"Search here...\"\r\n      onChange={searchChange} \r\n    />\r\n  );\r\n}\r\n\r\nexport default SearchField;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style={\r\n      {\r\n        overflowY: 'scroll', \r\n        height: '600px', \r\n        borderBottom: '5px solid gray'\r\n      }\r\n    }>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n    if(this.state.hasError) {\r\n      return <h1>Ooops. We got a problem here...</h1>\r\n    }else {\r\n      return this.props.children\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchField from '../components/SearchField';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField : ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => {this.setState({robots: users})})\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({searchField: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    const {robots, searchField} = this.state;\r\n    const filteredRobots = robots.filter(user => {\r\n      return user.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return !robots.length ?\r\n    <h1 className=\"heading tc\">Loading...</h1> :\r\n    <div className='tc'>\r\n      <h1 className=\"heading\">RoboFriends</h1>\r\n      <SearchField searchChange={this.onInputChange} />\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}